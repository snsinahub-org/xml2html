name: Test XML to HTML Action

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-action:
    runs-on: ubuntu-latest
    name: Test XML to HTML Conversion
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Simulate generating test results (you would replace this with your actual test command)
    - name: Create sample XML test results
      run: |
        mkdir -p test-results
        cat > test-results/sample-results.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <testsuites>
          <testsuite name="SampleTestSuite" tests="5" failures="1" time="2.345">
            <testcase name="test_success_1" classname="com.example.SampleTest" time="0.123"/>
            <testcase name="test_success_2" classname="com.example.SampleTest" time="0.456"/>
            <testcase name="test_success_3" classname="com.example.SampleTest" time="0.789"/>
            <testcase name="test_failure" classname="com.example.SampleTest" time="0.234">
              <failure message="Assertion failed">Expected true but was false</failure>
            </testcase>
            <testcase name="test_success_4" classname="com.example.SampleTest" time="0.543"/>
          </testsuite>
        </testsuites>
        EOF
    
    # Test 1: Generate HTML file
    - name: Convert XML to HTML File
      id: convert-file
      uses: ./
      with:
        xml-file: 'test-results/sample-results.xml'
        output-type: 'file'
        output-format: 'full'
        output-filename: 'test-report'
    
    # Test 2: Generate HTML code for step summary
    - name: Convert XML to HTML Code
      id: convert-code
      uses: ./
      with:
        xml-file: 'test-results/sample-results.xml'
        output-type: 'code'
        output-format: 'summary'
    
    # Test 3: Generate all formats
    - name: Convert XML to All HTML Formats
      id: convert-all
      uses: ./
      with:
        xml-file: 'test-results/sample-results.xml'
        output-type: 'file'
        output-format: 'all'
        output-filename: 'complete-report'
    
    # Upload generated files as artifacts
    - name: Upload HTML Reports
      uses: actions/upload-artifact@v4
      with:
        name: html-test-reports
        path: |
          *.html
        retention-days: 7
    
    # Display results
    - name: Display Test Results
      run: |
        echo "Test Results Summary:"
        echo "Total Tests: ${{ steps.convert-file.outputs.total-tests }}"
        echo "Passed Tests: ${{ steps.convert-file.outputs.passed-tests }}"
        echo "Failed Tests: ${{ steps.convert-file.outputs.failed-tests }}"
        echo "Total Suites: ${{ steps.convert-file.outputs.total-suites }}"
        echo "Total Time: ${{ steps.convert-file.outputs.total-time }}s"
        echo ""
        echo "Generated Files:"
        ls -la *.html
    
    # Comment on PR with test results (if it's a PR)
    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const totalTests = '${{ steps.convert-file.outputs.total-tests }}';
          const passedTests = '${{ steps.convert-file.outputs.passed-tests }}';
          const failedTests = '${{ steps.convert-file.outputs.failed-tests }}';
          const totalTime = '${{ steps.convert-file.outputs.total-time }}';
          
          const passRate = Math.round((passedTests / totalTests) * 100);
          const status = failedTests > 0 ? '‚ùå' : '‚úÖ';
          
          const comment = `## üß™ Test Results ${status}
          
          | Metric | Value |
          |--------|-------|
          | **Total Tests** | ${totalTests} |
          | **Passed** | ${passedTests} ‚úÖ |
          | **Failed** | ${failedTests} ${failedTests > 0 ? '‚ùå' : '‚úÖ'} |
          | **Pass Rate** | ${passRate}% |
          | **Total Time** | ${totalTime}s ‚è±Ô∏è |
          
          üìä [View detailed HTML reports in artifacts](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
          
          ---
          *Generated by XML to HTML Action*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
